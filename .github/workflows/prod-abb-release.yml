name: prod app release
run-name: ${{ github.actor }} triggered prod release
on:
  workflow_dispatch: # To trigger manual build
    release:
      types: [published] # only run the workflow when a new release has been published

jobs:
  install-and-test:
    name: Install and test
    runs-on: ubuntu-latest

    steps:
      ## prepare environment with cashing
      - name: Repo checkout
        uses: actions/checkout@v3

      - name: Install node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.15.0

      - name: Find yarn cache
        id: yarn-cache-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore yarn cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install npm dependencies
        run: yarn install --immutable

      - name: Linting check
        run: yarn lint:fix

      - name: Run unit tests
        run: yarn test

  android-build:
    name: Android build
    runs-on: ubuntu-latest
    steps:
      ## prepare environment with cashing
      - name: Repo checkout
        uses: actions/checkout@v3

      - name: Install node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.15.0

      - name: Install npm packages
        run: npm install --force

      ## build apk
      - name: Build Android release .apk
        run: |
          cd android && ./gradlew assembleRelease --no-daemon && cd ..

      ## sign apk
      - name: Sign .apk
        id: sign_apk
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      ## Distribute apk to Firebase App Distribution
      - name: Upload .apk to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.4.0
        with:
          appId: ${{secrets.ANDROID_FIREBASE_APP_ID}}
          # serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          token: ${{secrets.ANDROID_FIREBASE_TOKEN}}
          groups: testers
          file: ${{steps.sign_apk.outputs.signedReleaseFile}}
          releaseNotes: "Release .apk"

      ## build aab
      - name: Build Android release .aab
        run: |
          cd android && ./gradlew bundleRelease --no-daemon

      ## sign aab
      - name: Sign .aab
        id: sign_aab
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      # - name: Distribute abb to Firebase app distribution
      #   uses: wzieba/Firebase-Distribution-Github-Action@v1.4.0
      #   with:
      #     appId: ${{secrets.ANDROID_FIREBASE_APP_ID}}
      #     token: ${{secrets.ANDROID_FIREBASE_TOKEN}}
      #     # serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
      #     groups: testers
      #     file: android/app/build/outputs/bundle/release/app-release.aab
      #     releaseNotes: "Release .aab"

      ## Distribute aab to Google play store
      - name: Upload .abb to Google play store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON_TEXT }}
          packageName: com.savczukinv.pipeline
          releaseFiles: android/app/build/outputs/bundle/release/*.aab
          track: production
          status: draft
          inAppUpdatePriority: 2

  ios-build:
    name: iOS build
    runs-on: macos-12
    steps:
      ## prepare environment
      - name: repo checkout
        uses: actions/checkout@v3

      - name: Install node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.15.0

      - name: install npm packages
        run: npm install --force

      - name: install pod dependencies
        run: |
          cd ios && pod install && cd ..

      - name: build iOS release
        uses: yukiarrr/ios-build-action@v1.4.0
        with:
          project-path: ios/pipeline.xcodeproj
          workspace-path: ios/pipeline.xcworkspace

          mobileprovision-base64: ${{ secrets.IOS_MOBILE_PROVISION_BASE64 }}
          p12-base64: ${{ secrets.IOS_P12_BASE64 }}
          code-signing-identity: "iPhone Distribution"
          team-id: ${{ secrets.IOS_TEAM_ID }}
          certificate-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
